[
    {
        "id": "ce1bcc6514ed113f",
        "type": "subflow",
        "name": "JWT Sign",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 160,
                "wires": [
                    {
                        "id": "ff3dba8d6e7d5cce"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 160,
                "wires": [
                    {
                        "id": "59283f81b0468ed7",
                        "port": 0
                    },
                    {
                        "id": "ab61e7f6bb965e65",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0DEED",
        "icon": "font-awesome/fa-hashtag",
        "status": {
            "x": 320,
            "y": 60,
            "wires": [
                {
                    "id": "f2006b4ad0770cdf",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "59283f81b0468ed7",
        "type": "jwt sign",
        "z": "ce1bcc6514ed113f",
        "name": "1 Gün",
        "alg": "HS256",
        "exp": "86400000",
        "jwkurl": "",
        "jwkkid": "",
        "secret": "qwe1P23Klx0*123l$kaSd-*0*98X23lkjasDsad31Z2-*0",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 430,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ab61e7f6bb965e65",
        "type": "jwt sign",
        "z": "ce1bcc6514ed113f",
        "name": "1 Hafta",
        "alg": "HS256",
        "exp": "604800000",
        "jwkurl": "",
        "jwkkid": "",
        "secret": "qwe1P23Klx0*123l$kaSd-*0*98X23lkjasDsad31Z2-*0",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 440,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ff3dba8d6e7d5cce",
        "type": "switch",
        "z": "ce1bcc6514ed113f",
        "name": "",
        "property": "_payload.rememberMe",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "59283f81b0468ed7"
            ],
            [
                "ab61e7f6bb965e65"
            ]
        ]
    },
    {
        "id": "f2006b4ad0770cdf",
        "type": "status",
        "z": "ce1bcc6514ed113f",
        "name": "",
        "scope": null,
        "x": 200,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "82d5d8b46c2c8ce4",
        "type": "subflow",
        "name": "Response",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 100,
                "wires": [
                    {
                        "id": "88b0bc59a49f3abf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 100,
                "wires": [
                    {
                        "id": "88b0bc59a49f3abf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "code",
                "type": "str",
                "value": "0",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Başarılı"
                                },
                                "v": "0"
                            },
                            {
                                "l": {
                                    "en-US": "Validasyon Hatası"
                                },
                                "v": "1"
                            },
                            {
                                "l": {
                                    "en-US": "Sistem Hatası"
                                },
                                "v": "2"
                            },
                            {
                                "l": {
                                    "en-US": "Veri Bulunamadı"
                                },
                                "v": "3"
                            },
                            {
                                "l": {
                                    "en-US": "Yetki Hatası"
                                },
                                "v": "4"
                            }
                        ]
                    }
                }
            },
            {
                "name": "message",
                "type": "str",
                "value": "İşlem başarılı."
            },
            {
                "name": "isShowMessage",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Son kullanıcıya mesajı göster."
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "result",
                "type": "json",
                "value": "{}"
            }
        ],
        "meta": {},
        "color": "#FFF0F0",
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "88b0bc59a49f3abf",
        "type": "function",
        "z": "82d5d8b46c2c8ce4",
        "name": "Prepare Response Object",
        "func": "let { \n    code = env.get(\"code\"),\n    message = env.get(\"message\"),\n    isShowMessage = env.get(\"isShowMessage\"),\n    result = env.get(\"result\") } = msg.payload\n\nmsg.payload = { code, message, isShowMessage, result }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "03271de67f231601",
        "type": "subflow",
        "name": "Basic Validation",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 120,
                "wires": [
                    {
                        "id": "22060b6e277098de"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 100,
                "wires": [
                    {
                        "id": "22060b6e277098de",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "validationSchema",
                "type": "json",
                "value": "{}"
            }
        ],
        "meta": {},
        "color": "#FFCC66",
        "icon": "font-awesome/fa-crosshairs"
    },
    {
        "id": "22060b6e277098de",
        "type": "function",
        "z": "03271de67f231601",
        "name": "Validation",
        "func": "let validationSchema = env.get(\"validationSchema\") || msg.validationSchema || null\n\nif (!validationSchema || !Object.keys(validationSchema).length) return msg\n\nlet payloadKeys = Object.keys(msg.payload)\nlet validationKeys = Object.keys(validationSchema)\nlet isUnmatchKeys = payloadKeys.filter(pk => !validationKeys.includes(pk)) || !validationKeys.filter(vk => !payloadKeys.includes(vk))\n\nif (isUnmatchKeys.length) {\n    msg.payload = {\n        message: `'${isUnmatchKeys}' parametres(ler)i geçersiz bir parametredir.`\n    }\n    return [null, msg]\n}\n\nfor (let field in validationSchema) {\n    if (validationSchema[field].require && (!msg.payload[field] && ![false, 0].includes(msg.payload[field]))) {\n        msg.payload = {\n            message: `'${field}' parametresi olmak zorundadır.`\n        }\n        return [null, msg]\n    }\n    if (msg.payload[field] && typeof msg.payload[field] !== validationSchema[field].type && !Array.isArray(msg.payload[field])) {\n        msg.payload = {\n            message: `'${field}' parametresinin tipi ${validationSchema[field].type} olmalıdır.`\n        }\n        return [null, msg]\n    }\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 120,
        "wires": [
            [],
            [
                "bb06453e2e106811"
            ]
        ]
    },
    {
        "id": "bb06453e2e106811",
        "type": "subflow:82d5d8b46c2c8ce4",
        "z": "03271de67f231601",
        "name": "Invalid Handler",
        "env": [
            {
                "name": "code",
                "value": "1",
                "type": "str"
            },
            {
                "name": "message",
                "value": "Uygun olmayan parametre veya parametre değeri gönderildi.",
                "type": "str"
            },
            {
                "name": "isShow",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 500,
        "y": 140,
        "wires": [
            [
                "7f16a409b734cff1"
            ]
        ]
    },
    {
        "id": "7f16a409b734cff1",
        "type": "http response",
        "z": "03271de67f231601",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 660,
        "y": 140,
        "wires": []
    },
    {
        "id": "9ef7fbdf10fb6dab",
        "type": "http in",
        "z": "1f62240e0094d3c9",
        "name": "",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "b301d9a94edec3ea"
            ]
        ]
    },
    {
        "id": "b301d9a94edec3ea",
        "type": "subflow:03271de67f231601",
        "z": "1f62240e0094d3c9",
        "name": "",
        "env": [
            {
                "name": "validationSchema",
                "value": "{\"unameOrEmail\":{\"type\":\"string\",\"require\":true},\"password\":{\"type\":\"string\",\"require\":true},\"rememberMe\":{\"type\":\"boolean\",\"require\":false}}",
                "type": "json"
            }
        ],
        "x": 320,
        "y": 260,
        "wires": [
            [
                "06dea78573f8eca3"
            ]
        ]
    },
    {
        "id": "06dea78573f8eca3",
        "type": "function",
        "z": "1f62240e0094d3c9",
        "name": "Query",
        "func": "msg._payload = msg.payload\nmsg.payload = {\n    $or: [\n        { username: msg._payload.unameOrEmail },\n        { email: msg._payload.unameOrEmail }\n    ]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 260,
        "wires": [
            [
                "62a3add161ba769f"
            ]
        ]
    },
    {
        "id": "62a3add161ba769f",
        "type": "mongodb4",
        "z": "1f62240e0094d3c9",
        "clientNode": "da6360c8f119cb98",
        "mode": "collection",
        "collection": "Users",
        "operation": "findOne",
        "output": "toArray",
        "handleDocId": true,
        "name": "",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "72a2aa0dd917c2b5"
            ]
        ]
    },
    {
        "id": "72a2aa0dd917c2b5",
        "type": "function",
        "z": "1f62240e0094d3c9",
        "name": "Has User",
        "func": "if (!msg.payload) return [null, msg]\n\nmsg.user = msg.payload\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 260,
        "wires": [
            [
                "a27a778d93a153d9"
            ],
            [
                "ad0abc02a566d577"
            ]
        ]
    },
    {
        "id": "a27a778d93a153d9",
        "type": "bcrypt",
        "z": "1f62240e0094d3c9",
        "name": "",
        "action": "verify",
        "field": "_payload.password",
        "hash": "payload.password",
        "target": "payload",
        "assignment": "replace",
        "match": "isMatch",
        "outputs": 1,
        "rounds": 10,
        "x": 980,
        "y": 240,
        "wires": [
            [
                "bac3b1d7d93f2425"
            ]
        ]
    },
    {
        "id": "ad0abc02a566d577",
        "type": "subflow:82d5d8b46c2c8ce4",
        "z": "1f62240e0094d3c9",
        "name": "User Not Found",
        "env": [
            {
                "name": "code",
                "value": "3",
                "type": "str"
            },
            {
                "name": "message",
                "value": "Kullanıcı bilgileri hatalı.",
                "type": "str"
            },
            {
                "name": "isShowMessage",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "isShow",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 1000,
        "y": 280,
        "wires": [
            [
                "63ad3c5b90db4fe7"
            ]
        ]
    },
    {
        "id": "bac3b1d7d93f2425",
        "type": "function",
        "z": "1f62240e0094d3c9",
        "name": "Check User",
        "func": "if (!msg.isMatch) return [null, msg]\n\nmsg.payload = {\n    username: msg.user.username,\n    email: msg.user.email,\n    displayName: msg.user.displayName,\n    roles: msg.user.roles,\n    ip: msg.req.headers[\"x-real-ip\"] || msg.req.headers[\"x-forwarded-for\"] || msg.req.ip\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "35addaefb48a0a7b"
            ],
            [
                "bcc645eba2391b05"
            ]
        ]
    },
    {
        "id": "63ad3c5b90db4fe7",
        "type": "http response",
        "z": "1f62240e0094d3c9",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1180,
        "y": 280,
        "wires": []
    },
    {
        "id": "35addaefb48a0a7b",
        "type": "subflow:ce1bcc6514ed113f",
        "z": "1f62240e0094d3c9",
        "name": "",
        "x": 1320,
        "y": 220,
        "wires": [
            [
                "ec5a4384e0499ba7"
            ]
        ]
    },
    {
        "id": "bcc645eba2391b05",
        "type": "subflow:82d5d8b46c2c8ce4",
        "z": "1f62240e0094d3c9",
        "name": "User Unverified",
        "env": [
            {
                "name": "code",
                "value": "3",
                "type": "str"
            },
            {
                "name": "message",
                "value": "Kullanıcı bilgileri hatalı.",
                "type": "str"
            },
            {
                "name": "isShowMessage",
                "type": "bool",
                "value": "true"
            }
        ],
        "x": 1340,
        "y": 260,
        "wires": [
            [
                "90d02620f22687c2"
            ]
        ]
    },
    {
        "id": "ec5a4384e0499ba7",
        "type": "function",
        "z": "1f62240e0094d3c9",
        "name": "Set Token",
        "func": "msg.cookies = {\n    token: msg.token\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 220,
        "wires": [
            [
                "99d9b70656f256d0"
            ]
        ]
    },
    {
        "id": "90d02620f22687c2",
        "type": "http response",
        "z": "1f62240e0094d3c9",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1520,
        "y": 260,
        "wires": []
    },
    {
        "id": "99d9b70656f256d0",
        "type": "subflow:82d5d8b46c2c8ce4",
        "z": "1f62240e0094d3c9",
        "name": "Success",
        "x": 1640,
        "y": 220,
        "wires": [
            [
                "5be86c738d2c64f6"
            ]
        ]
    },
    {
        "id": "5be86c738d2c64f6",
        "type": "http response",
        "z": "1f62240e0094d3c9",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1800,
        "y": 220,
        "wires": []
    },
    {
        "id": "da6360c8f119cb98",
        "type": "mongodb4-client",
        "name": "Paperx DB",
        "protocol": "mongodb",
        "hostname": "localhost",
        "port": "27017",
        "dbName": "paperx",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsInsecure": false,
        "uri": "",
        "advanced": "",
        "uriTabActive": "tab-uri-simple"
    }
]